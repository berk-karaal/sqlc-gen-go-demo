// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package entities

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusPaymentWaiting  OrderStatus = "payment_waiting"
	OrderStatusPaymentAccepted OrderStatus = "payment_accepted"
	OrderStatusPreparing       OrderStatus = "preparing"
	OrderStatusShipped         OrderStatus = "shipped"
	OrderStatusDelivered       OrderStatus = "delivered"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

func AllOrderStatusValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPaymentWaiting,
		OrderStatusPaymentAccepted,
		OrderStatusPreparing,
		OrderStatusShipped,
		OrderStatusDelivered,
	}
}

type Order struct {
	ID     int32
	UserID int32
	Total  int32
	Status OrderStatus
}

type SchemaMigration struct {
	Version int64
	Dirty   bool
}

type User struct {
	ID        int32
	Email     string
	FullName  pgtype.Text
	IsActive  bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}
