// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type MemberType string

const (
	MemberTypeStandard MemberType = "standard"
	MemberTypeGold     MemberType = "gold"
	MemberTypeDiamond  MemberType = "diamond"
)

func (e *MemberType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MemberType(s)
	case string:
		*e = MemberType(s)
	default:
		return fmt.Errorf("unsupported scan type for MemberType: %T", src)
	}
	return nil
}

type NullMemberType struct {
	MemberType MemberType
	Valid      bool // Valid is true if MemberType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMemberType) Scan(value interface{}) error {
	if value == nil {
		ns.MemberType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MemberType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMemberType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MemberType), nil
}

func AllMemberTypeValues() []MemberType {
	return []MemberType{
		MemberTypeStandard,
		MemberTypeGold,
		MemberTypeDiamond,
	}
}

type Comment struct {
	ID        int32
	UserID    pgtype.Int4
	Content   string
	CreatedAt pgtype.Timestamp
}

type User struct {
	ID       int32
	Name     pgtype.Text
	Email    string
	Password string
	Mtype    MemberType
}
