// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlcrepo

import (
	"context"

	"github.com/berk-karaal/sqlc-gen-go-demo/simple-project/models"
	"github.com/jackc/pgx/v5/pgtype"
)

const getUserMemberType = `-- name: GetUserMemberType :one
SELECT mtype FROM users WHERE id = $1
`

func (q *Queries) GetUserMemberType(ctx context.Context, id int32) (models.MemberType, error) {
	row := q.db.QueryRow(ctx, getUserMemberType, id)
	var mtype models.MemberType
	err := row.Scan(&mtype)
	return mtype, err
}

const listCommentsByUserId = `-- name: ListCommentsByUserId :many
SELECT id, user_id, content, created_at FROM comments WHERE user_id = $1
`

func (q *Queries) ListCommentsByUserId(ctx context.Context, userID pgtype.Int4) ([]models.Comment, error) {
	rows, err := q.db.Query(ctx, listCommentsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.Comment
	for rows.Next() {
		var i models.Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password, mtype FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]models.User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.User
	for rows.Next() {
		var i models.User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Mtype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByMemberType = `-- name: ListUsersByMemberType :many
SELECT id, name, email, password, mtype FROM users WHERE mtype = $1
`

func (q *Queries) ListUsersByMemberType(ctx context.Context, mtype models.MemberType) ([]models.User, error) {
	rows, err := q.db.Query(ctx, listUsersByMemberType, mtype)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.User
	for rows.Next() {
		var i models.User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Mtype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
